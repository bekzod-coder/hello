package Interpreter;

import AST.*;

import java.lang.reflect.Method;
import java.util.*;

public class Interpreter {
    private TranNode top;

    /** Constructor - get the interpreter ready to run. Set members from parameters and "prepare" the class.
     *
     * Store the tran node.
     * Add any built-in methods to the AST
     * @param top - the head of the AST
     */
    public Interpreter(TranNode top) {
        this.top = top;
        ClassNode consoleNode = new ClassNode();
        consoleNode.name = "console";
        ConsoleWrite consoleWrite = new ConsoleWrite();
        consoleWrite.name = "write";
        consoleNode.methods.add(consoleWrite);
        top.Classes.add(consoleNode);
    }

    /**
     * This is the public interface to the interpreter. After parsing, we will create an interpreter and call start to
     * start interpreting the code.
     *
     * Search the classes in Tran for a method that is "isShared", named "start", that is not private and has no parameters
     * Call "InterpretMethodCall" on that method, then return.
     * Throw an exception if no such method exists.
     */
    public void start() {

       for(ClassNode classes : top.Classes) {
           ObjectIDT someObject = new ObjectIDT(classes);
           for(MethodDeclarationNode method : classes.methods){

               System.out.println(classes.name);
               if(method.name.equals("start")){
                   if(method.parameters.isEmpty()){
                       if(method.isShared){
                           if(!method.isPrivate){

                               interpretMethodCall(Optional.of(someObject), method, new ArrayList<>());
                               return;
                           }
                       }
                   }
               }
           }
       }
    }

    //              Running Methods

    /**
     * Find the method (local to this class, shared (like Java's system.out.print), or a method on another class)
     * Evaluate the parameters to have a list of values
     * Use interpretMethodCall() to actually run the method.
     *
     * Call GetParameters() to get the parameter value list
     * Find the method. This is tricky - there are several cases:
     * someLocalMethod() - has NO object name. Look in "object"
     * console.write() - the objectName is a CLASS and the method is shared
     * bestStudent.getGPA() - the objectName is a local or a member
     *
     * Once you find the method, call InterpretMethodCall() on it. Return the list that it returns.
     * Throw an exception if we can't find a match.
     * @param object - the object we are inside right now (might be empty)
     * @param locals - the current local variables
     * @param mc - the method call
     * @return - the return values
     */
    private List<InterpreterDataType> findMethodForMethodCallAndRunIt(Optional<ObjectIDT> object, HashMap<String, InterpreterDataType> locals, MethodCallStatementNode mc) {
        List<InterpreterDataType> result = null;
        return result;
    }

    /**
     * Run a "prepared" method (found, parameters evaluated)
     * This is split from findMethodForMethodCallAndRunIt() because there are a few cases where we don't need to do the finding:
     * in start() and dealing with loops with iterator objects, for example.
     *
     * Check to see if "m" is a built-in. If so, call Execute() on it and return
     * Make local variables, per "m"
     * If the number of passed in values doesn't match m's "expectations", throw
     * Add the parameters by name to locals.
     * Call InterpretStatementBlock
     * Build the return list - find the names from "m", then get the values for those names and add them to the list.
     * @param object - The object this method is being called on (might be empty for shared)
     * @param m - Which method is being called
     * @param values - The values to be passed in
     * @return the returned values from the method
     */
    private List<InterpreterDataType> interpretMethodCall(Optional<ObjectIDT> object, MethodDeclarationNode m, List<InterpreterDataType> values) {
        var retVal = new LinkedList<InterpreterDataType>();
        if(m instanceof BuiltInMethodDeclarationNode){
            ConsoleWrite myconsolewrite = new ConsoleWrite();
            myconsolewrite.Execute(values);
            return retVal;
        }

        if(values.size() != m.parameters.size()){
            throw new IllegalArgumentException();
        }


        HashMap<String, InterpreterDataType> locals = new HashMap<>();
        for(int i = 0; i < m.parameters.size(); i++){
            String paramName = m.parameters.get(i).name;
            locals.put(paramName, values.get(i));
        }

        interpretStatementBlock(object, m.statements, locals);

        for(VariableDeclarationNode returnNode : m.returns){
            InterpreterDataType returnValue = locals.get(returnNode.name);
            retVal.add(returnValue);
        }

        return retVal;
    }

    //              Running Constructors

    /**
     * This is a special case of the code for methods. Just different enough to make it worthwhile to split it out.
     *
     * Call GetParameters() to populate a list of IDT's
     * Call GetClassByName() to find the class for the constructor
     * If we didn't find the class, throw an exception
     * Find a constructor that is a good match - use DoesConstructorMatch()
     * Call InterpretConstructorCall() on the good match
     * @param callerObj - the object that we are inside when we called the constructor
     * @param locals - the current local variables (used to fill parameters)
     * @param mc  - the method call for this construction
     * @param newOne - the object that we just created that we are calling the constructor for
     */
    private void findConstructorAndRunIt(Optional<ObjectIDT> callerObj, HashMap<String, InterpreterDataType> locals, MethodCallStatementNode mc, ObjectIDT newOne) {
        List<InterpreterDataType> params = getParameters(callerObj, locals, mc);
        String methodName = mc.methodName;
        Optional<ClassNode> classNodeOpt = getClassByName(methodName);

        if (classNodeOpt.isEmpty()) {
            throw new RuntimeException("Class " + methodName + " not found.");
        }

        ClassNode classNode = classNodeOpt.get();

        ConstructorNode matchingConstructor = null;
        for (ConstructorNode constructor : classNode.constructors) {
            if (doesConstructorMatch(constructor, mc, params)) {
                matchingConstructor = constructor;
                break;
            }
        }

        if (matchingConstructor == null) {
            throw new RuntimeException("No matching constructor found for class " + methodName);
        }

        interpretConstructorCall(newOne, matchingConstructor, params);
    }

    /**
     * Similar to interpretMethodCall, but "just different enough" - for example, constructors don't return anything.
     *
     * Creates local variables (as defined by the ConstructorNode), calls Instantiate() to do the creation
     * Checks to ensure that the right number of parameters were passed in, if not throw.
     * Adds the parameters (with the names from the ConstructorNode) to the locals.
     * Calls InterpretStatementBlock
     * @param object - the object that we allocated
     * @param c - which constructor is being called
     * @param values - the parameter values being passed to the constructor
     */
    private void interpretConstructorCall(ObjectIDT object, ConstructorNode c, List<InterpreterDataType> values) {
//        if (values.size() != c.parameters.size()) {
//            throw new IllegalArgumentException("Constructor called with incorrect number of parameters. Expected: " + c.getParameters().size() + ", Received: " + values.size());
//        }

        HashMap<String, InterpreterDataType> locals = new HashMap<>();

        for (int i = 0; i < c.parameters.size(); i++) {
            String paramName = c.parameters.get(i).name;
            locals.put(paramName, values.get(i));
        }

        for (VariableDeclarationNode varDecl : c.locals) {
            String varName = varDecl.name;
            String varType = varDecl.type;
            locals.put(varName, instantiate(varType));
        }

        interpretStatementBlock(Optional.of(object), c.statements, locals);
    }

    //              Running Instructions

    /**
     * Given a block (which could be from a method or an "if" or "loop" block, run each statement.
     * Blocks, by definition, do ever statement, so iterating over the statements makes sense.
     *
     * For each statement in statements:
     * check the type:
     *      For AssignmentNode, FindVariable() to get the target. Evaluate() the expression. Call Assign() on the target with the result of Evaluate()
     *      For MethodCallStatementNode, call doMethodCall(). Loop over the returned values and copy the into our local variables
     *      For LoopNode - there are 2 kinds.
     *          Setup:
     *          If this is a Loop over an iterator (an Object node whose class has "iterator" as an interface)
     *              Find the "getNext()" method; throw an exception if there isn't one
     *          Loop:
     *          While we are not done:
     *              if this is a boolean loop, Evaluate() to get true or false.
     *              if this is an iterator, call "getNext()" - it has 2 return values. The first is a boolean (was there another?), the second is a value
     *              If the loop has an assignment variable, populate it: for boolean loops, the true/false. For iterators, the "second value"
     *              If our answer from above is "true", InterpretStatementBlock() on the body of the loop.
     *       For If - Evaluate() the condition. If true, InterpretStatementBlock() on the if's statements. If not AND there is an else, InterpretStatementBlock on the else body.
     * @param object - the object that this statement block belongs to (used to get member variables and any members without an object)
     * @param statements - the statements to run
     * @param locals - the local variables
     */
    private void interpretStatementBlock(Optional<ObjectIDT> object, List<StatementNode> statements, HashMap<String, InterpreterDataType> locals) {
//        for (StatementNode statement : statements) {
//            if (statement instanceof AssignmentNode) {
//                AssignmentNode assignment = (AssignmentNode) statement;
//                InterpreterDataType target = findVariable(assignment.target.name, locals, object);
//                InterpreterDataType value = evaluate(locals, object, assignment.expression);
//                if(target instanceof CharIDT){
//                    if(value instanceof CharIDT){
//                        ((CharIDT) target).Assign((CharIDT) value);
//                    }
//                } else if (target instanceof StringIDT) {
//                    if(value instanceof StringIDT){
//                        ((StringIDT) target).Assign((StringIDT) value);
//                    }
//                } else if (target instanceof NumberIDT) {
//                    if(value instanceof NumberIDT){
//                        ((NumberIDT) target).Assign((NumberIDT) value);
//                    }
//                } else if (target instanceof BooleanIDT) {
//                    if(value instanceof BooleanIDT){
//                        ((BooleanIDT) target).Assign((BooleanIDT) value);
//                    }
//                } else if (target instanceof ObjectIDT) {
//                    if(value instanceof ObjectIDT){
//                        ((ObjectIDT) target).Assign((ObjectIDT) value);
//                    }
//                } else if (target instanceof ReferenceIDT) {
//                    if(value instanceof ReferenceIDT){
//                        ((ReferenceIDT) target).Assign((ReferenceIDT) value);
//                    }
//                }
//            }
//            else if (statement instanceof MethodCallStatementNode) {
//                MethodCallStatementNode methodCall = (MethodCallStatementNode) statement;
//                List<InterpreterDataType> paramValues = getParameters(object, locals, methodCall);
//                MethodDeclarationNode method = findMethodForMethodCallAndRunIt(object, locals, methodCall);
//                List<InterpreterDataType> results = interpretMethodCall(object, method, paramValues);
//                for (int i = 0; i < methodCall.returnValues.size(); i++) {
//                    locals.put(methodCall.returnValues.get(i).name, results.get(i));
//                }
//            }
//            else if (statement instanceof LoopNode) {
//                LoopNode loop = (LoopNode) statement;
//                if (loop.isIteratorLoop()) {
//                    InterpreterDataType iterator = evaluate(locals, object, loop.expression);
//                    MethodDeclarationNode getNextMethod = getMethodFromObject((ObjectIDT) iterator, loop.getGetNextMethod(), new ArrayList<>());
//                    while (true) {
//                        List<InterpreterDataType> getNextResults = executeMethod(getNextMethod, new ArrayList<>());
//                        if (!((BooleanLiteralNode) getNextResults.get(0)).getValue()) break;
//                        if (loop.hasAssignmentVariable()) {
//                            locals.put(loop.getAssignmentVariable(), getNextResults.get(1));
//                        }
//                        interpretStatementBlock(object, loop.getBody(), locals);
//                    }
//                } else {
//                    while (((BooleanLiteralNode) evaluate(locals, object, loop.getCondition())).getValue()) {
//                        interpretStatementBlock(object, loop.getBody(), locals);
//                    }
//                }
//            }
//            else if (statement instanceof IfNode) {
//                IfNode ifNode = (IfNode) statement;
//                if (((BooleanLiteralNode) evaluate(locals, object, ifNode.getCondition())).getValue()) {
//                    interpretStatementBlock(object, ifNode.getIfBody(), locals);
//                } else if (ifNode.hasElseBody()) {
//                    interpretStatementBlock(object, ifNode.getElseBody(), locals);
//                }
//            }
//            else {
//                throw new IllegalArgumentException("Unknown statement type: " + statement.getClass().getName());
//            }
//        }

    }

    /**
     *  evaluate() processes everything that is an expression - math, variables, boolean expressions.
     *  There is a good bit of recursion in here, since math and comparisons have left and right sides that need to be evaluated.
     *
     * See the How To Write an Interpreter document for examples
     * For each possible ExpressionNode, do the work to resolve it:
     * BooleanLiteralNode - create a new BooleanLiteralNode with the same value
     *      - Same for all of the basic data types
     * BooleanOpNode - Evaluate() left and right, then perform either and/or on the results.
     * CompareNode - Evaluate() both sides. Do good comparison for each data type
     * MathOpNode - Evaluate() both sides. If they are both numbers, do the math using the built-in operators. Also handle String + String as concatenation (like Java)
     * MethodCallExpression - call doMethodCall() and return the first value
     * VariableReferenceNode - call findVariable()
     * @param locals the local variables
     * @param object - the current object we are running
     * @param expression - some expression to evaluate
     * @return a value
     */
    private InterpreterDataType evaluate(HashMap<String, InterpreterDataType> locals, Optional<ObjectIDT> object, ExpressionNode expression) {
//        if(expression instanceof BooleanLiteralNode){
//            return new BooleanLiteralNode(((BooleanLiteralNode) expression).value);
//        } else if (expression instanceof NumericLiteralNode) {
//            return new NumericLiteralNode(((NumericLiteralNode) expression).value);
//        } else if (expression instanceof StringLiteralNode) {
//            return new StringLiteralNode(((StringLiteralNode) expression).value);
//        } else if (expression instanceof BooleanLiteralNode){
//            BooleanOpNode bop = (BooleanOpNode) expression;
//            InterpreterDataType left = evaluate(locals, object, bop.left);
//            InterpreterDataType right = evaluate(locals, object, bop.right);
//            if(left instanceof BooleanLiteralNode && right instanceof BooleanLiteralNode){
//                boolean leftValue = ((BooleanLiteralNode) left).value;
//                boolean rightValue = ((BooleanLiteralNode) right).value;
//                if(bop.op.equals("AND")){
//                    return new BooleanLiteralNode(leftValue && rightValue);
//                } else if (bop.op.equals("OR")) {
//                    return new BooleanLiteralNode(leftValue || rightValue);
//                }
//            }
//        } else if (expression instanceof CompareNode) {
//            CompareNode cnode = (CompareNode) expression;
//            InterpreterDataType left = evaluate(locals, object, cnode.left);
//            InterpreterDataType right = evaluate(locals, object, cnode.right);
//            if(left instanceof NumericLiteralNode && right instanceof NumericLiteralNode){
//                return new BooleanLiteralNode((NumericLiteralNode) left).value == ((NumericLiteralNode) right).value;
//            } else if (left instanceof StringLiteralNode && right instanceof StringLiteralNode) {
//                return new BooleanLiteralNode((StringLiteralNode) left).value.equals(((StringLiteralNode) right).value);
//            }
//        } else if (expression instanceof MathOpNode) {
//            MathOpNode mnode = (MathOpNode) expression;
//            InterpreterDataType left = evaluate(locals, object, mnode.left);
//            InterpreterDataType right = evaluate(locals, object, mnode.right);
//            if(left instanceof NumericLiteralNode && right instanceof NumericLiteralNode){
//                double leftValue = ((NumericLiteralNode) left).value;
//                double rightValue = ((NumericLiteralNode) right).value;
//                switch (mnode.op){
//                    case "+":
//                        return new NumericLiteralNode(leftValue + rightValue);
//                        case "-":
//                        return new NumericLiteralNode(leftValue - rightValue);
//                    case "*":
//                        return new NumericLiteralNode(leftValue * rightValue);
//                    case "/":
//                        return new NumericLiteralNode(leftValue / rightValue);
//                }
//            } else if (left instanceof StringLiteralNode && right instanceof StringLiteralNode && mnode.op.equals("+")) {
//                return new StringLiteralNode((StringLiteralNode) left).value + ((StringLiteralNode) right).value;
//            }
//        } else if (expression instanceof MethodCallExpressionNode) {
//            MethodCallExpressionNode mce = (MethodCallExpressionNode) expression;
//            return doMethodCall(locals, object, mce, evaluate(locals, object, mce.parameters));
//        } else if (expression instanceof VariableReferenceNode) {
//            VariableReferenceNode vref = (VariableReferenceNode) expression;
//            return findVariable(vref.name, locals, object);
//        }
//        throw new IllegalArgumentException();
        return null;
    }

    //              Utility Methods

    /**
     * Used when trying to find a match to a method call. Given a method declaration, does it match this methoc call?
     * We double check with the parameters, too, although in theory JUST checking the declaration to the call should be enough.
     *
     * Match names, parameter counts (both declared count vs method call and declared count vs value list), return counts.
     * If all of those match, consider the types (use TypeMatchToIDT).
     * If everything is OK, return true, else return false.
     * Note - if m is a built-in and isVariadic is true, skip all of the parameter validation.
     * @param m - the method declaration we are considering
     * @param mc - the method call we are trying to match
     * @param parameters - the parameter values for this method call
     * @return does this method match the method call?
     */
    private boolean doesMatch(MethodDeclarationNode m, MethodCallStatementNode mc, List<InterpreterDataType> parameters) {
        if(!m.name.equals(mc.methodName)){
            return false;
        }

        if(m instanceof BuiltInMethodDeclarationNode && ((BuiltInMethodDeclarationNode) m).isVariadic){
            return true;
        }

        if(m.parameters.size() != mc.parameters.size()){
            return false;
        }

        if(m.parameters.size() != parameters.size()){
            return false;
        }

        if(m.returns.size() != mc.returnValues.size()){
            return false;
        }

        for(int i = 0; i < m.parameters.size(); i++){
            String extectedType = m.parameters.get(i).type;
            InterpreterDataType actualParameter = parameters.get(i);

            if(!typeMatchToIDT(extectedType, actualParameter)){
                return false;
            }
        }
        return true;
    }

    /**
     * Very similar to DoesMatch() except simpler - there are no return values, the name will always match.
     * @param c - a particular constructor
     * @param mc - the method call
     * @param parameters - the parameter values
     * @return does this constructor match the method call?
     */
    private boolean doesConstructorMatch(ConstructorNode c, MethodCallStatementNode mc, List<InterpreterDataType> parameters) {
        if(c.parameters.size() != parameters.size()){
            return false;
        }

        for(int i = 0; i < c.parameters.size(); i++){
            String expectedType = c.parameters.get(i).type;
            InterpreterDataType actualParameter = parameters.get(i);

            if(!typeMatchToIDT(expectedType, actualParameter)){
                return false;
            }
        }
        return true;
    }

    /**
     * Used when we call a method to get the list of values for the parameters.
     *
     * for each parameter in the method call, call Evaluate() on the parameter to get an IDT and add it to a list
     * @param object - the current object
     * @param locals - the local variables
     * @param mc - a method call
     * @return the list of method values
     */
    private List<InterpreterDataType> getParameters(Optional<ObjectIDT> object, HashMap<String,InterpreterDataType> locals, MethodCallStatementNode mc) {
        List<InterpreterDataType> paramValues = new ArrayList<>();

        for(ExpressionNode param : mc.parameters){
//            InterpreterDataType evaluatedValue = param.evaluate(object, locals);
//            paramValues.add(evaluatedValue);
        }

        return paramValues;
    }

    /**
     * Used when we have an IDT and we want to see if it matches a type definition
     * Commonly, when someone is making a function call - do the parameter values match the method declaration?
     *
     * If the IDT is a simple type (boolean, number, etc) - does the string type match the name of that IDT ("boolean", etc)
     * If the IDT is an object, check to see if the name matches OR the class has an interface that matches
     * If the IDT is a reference, check the inner (refered to) type
     * @param type the name of a data type (parameter to a method)
     * @param idt the IDT someone is trying to pass to this method
     * @return is this OK?
     */
    private boolean typeMatchToIDT(String type, InterpreterDataType idt) {
        if(idt == null){
            return false;
        }

        if(idt instanceof BooleanIDT && type.equals("boolean")){
            return true;
        }

        if(idt instanceof NumberIDT && type.equals("number")){
            return true;
        }

        if(idt instanceof StringIDT && type.equals("string")){
            return true;
        }

        if(idt instanceof ObjectIDT objectIDT){
            if(objectIDT.getClass().equals(type)){
                return true;
            }

//            if(objectIDT.getInterface().contains(type)){
//                return true;
//            }
        }

        if(idt instanceof ReferenceIDT refIDT){
            return typeMatchToIDT(type, refIDT.refersTo.get());
        }
        throw new RuntimeException("Unable to resolve type " + type);

    }

    /**
     * Find a method in an object that is the right match for a method call (same name, parameters match, etc. Uses doesMatch() to do most of the work)
     *
     * Given a method call, we want to loop over the methods for that class, looking for a method that matches (use DoesMatch) or throw
     * @param object - an object that we want to find a method on
     * @param mc - the method call
     * @param parameters - the parameter value list
     * @return a method or throws an exception
     */
    private MethodDeclarationNode getMethodFromObject(ObjectIDT object, MethodCallStatementNode mc, List<InterpreterDataType> parameters) {
        String methodName = mc.methodName;
        List<MethodDeclarationNode> methods = object.astNode.methods;

        for(MethodDeclarationNode method : methods){
            if(method.name.equals(methodName) && doesMatch(method, mc, parameters)){
                return method;
            }
        }
        throw new RuntimeException("Unable to resolve method call " + mc);
    }

    /**
     * Find a class, given the name. Just loops over the TranNode's classes member, matching by name.
     *
     * Loop over each class in the top node, comparing names to find a match.
     * @param name Name of the class to find
     * @return either a class node or empty if that class doesn't exist
     */
    private Optional<ClassNode> getClassByName(String name) {
        TranNode tranNode = new TranNode();
        for(ClassNode classNode : tranNode.Classes){
            if(classNode.name.equals(name)){
                return Optional.of(classNode);
            }
        }
        return Optional.empty();
    }

    /**
     * Given an execution environment (the current object, the current local variables), find a variable by name.
     *
     * @param name  - the variable that we are looking for
     * @param locals - the current method's local variables
     * @param object - the current object (so we can find members)
     * @return the IDT that we are looking for or throw an exception
     */
    private InterpreterDataType findVariable(String name, HashMap<String,InterpreterDataType> locals, Optional<ObjectIDT> object) {
        if(locals.containsKey(name)){
            return locals.get(name);
        }

        if(object.isPresent()){
            ObjectIDT objectID = object.get();
            if(objectID.members.containsKey(name)){
                return objectID.members.get(name);
            }
        }
        throw new RuntimeException("Unable to find variable " + name);
    }

    /**
     * Given a string (the type name), make an IDT for it.
     *
     * @param type The name of the type (string, number, boolean, character). Defaults to ReferenceIDT if not one of those.
     * @return an IDT with default values (0 for number, "" for string, false for boolean, ' ' for character)
     */
    private InterpreterDataType instantiate(String type) {
        switch (type.toLowerCase()) {
            case "boolean":
                return new BooleanIDT(true);
                case "number":
                    return new NumberIDT(1);
                    case "string":
                        return new StringIDT("");
            case "character":
                return new CharIDT(' ');
                default:
                    return new ReferenceIDT();
        }
    }
}
